# Docker Compose 

services:
  # MySQL 데이터베이스
  mysql:
    image: mysql:8.0
    container_name: calelog-mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: calelog
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d
    restart: always
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 12
      start_period: 30s

  # Spring Boot 백엔드 (내부 네트워크만)
  backend:
    image: calelog-backend:latest
    container_name: calelog-backend
    environment:
      CALELOG_PROFILE: prod
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      CALELOG_CORS_ORIGINS: ${CALELOG_CORS_ORIGINS}
      CALELOG_JWT_SECRET: ${CALELOG_JWT_SECRET}
    # 외부 포트 노출 제거 (보안 강화)
    # ports:
    #   - "8080:8080"
    depends_on:
      mysql:
        condition: service_healthy
    restart: always

  # React 프론트엔드 (내부 네트워크만)
  frontend:
    image: calelog-frontend:latest
    container_name: calelog-frontend
    # 외부 포트 노출 제거 (Nginx에서 처리)
    # ports:
    #   - "3000:3000"
    #   - "80:3000"
    restart: always

  # Nginx 리버스 프록시 (외부 접점)
  nginx:
    image: nginx:alpine
    container_name: calelog-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - /etc/letsencrypt/live/callog.o-r.kr/fullchain.pem:/etc/letsencrypt/live/callog.o-r.kr/fullchain.pem:ro
      - /etc/letsencrypt/live/callog.o-r.kr/privkey.pem:/etc/letsencrypt/live/callog.o-r.kr/privkey.pem:ro
    depends_on:
      - frontend
      - backend
    restart: always

volumes:
  mysql_data: